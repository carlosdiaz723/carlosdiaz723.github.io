@page "/newsletters"

@using NClubGA.Components.Newsletters
@using System.Reflection
@using static NClubGA.Models.AvailableNewsletters.Util

<PageTitle>Newsletters</PageTitle>

<div>Newsletters</div>
<div class="newsletters">
    <div class="list">
        @foreach (var year in _years)
        {
            <div>@year</div>
            @foreach (var package in _newsletters)
            {
                if (package.Year == year)
                {
                    <NewsletterTile
                        Year="@package.Year"
                        Month="@package.Month"
                    />
                }
            }
        }
    </div>
    <div>Legacy Newsletters</div>
    <div>These newsletters are PDF's from before this site existed.</div>
    <div class="legacy-list">
        @foreach (var year in _legacyYears)
        {
            <div>@year</div>
            @foreach (var package in _legacyNewsletters)
            {
                if (package.Year == year)
                {
                    <NewsletterTile
                        Year="@package.Year"
                        Month="@package.Month"
                        Url="@($"/legacy-newsletters/{package.Year}/{package.Month}.pdf")"
                    />
                }
            }
        }
    </div>
</div>

@code {
    private List<NewsletterPackage> _newsletters = new();
    private List<NewsletterPackage> _legacyNewsletters = new();

    private HashSet<int> _years = new();
    private HashSet<int> _legacyYears = new();
    protected override void OnInitialized()
    {
        foreach (var year in Years)
        {
            var path = $"{NewsletterBaseNamespace}._{year}";
            foreach (var monthKVP in Months)
            {
                var typeName = $"{path}.{monthKVP.Key}";
                Type? type = Assembly.GetExecutingAssembly().GetType(typeName);
                if (type is not null)
                {
                    var package = new NewsletterPackage
                    {
                        Year = year,
                        Month = monthKVP.Key
                    };
                    _years.Add(year);
                    _newsletters.Add(package);
                }
                else if (DetermineIfLegacy(year, monthKVP.Key))
                {
                    var package = new NewsletterPackage
                    {
                        Year = year,
                        Month = monthKVP.Key
                    };
                    _legacyYears.Add(year);
                    _legacyNewsletters.Add(package);
                }
            }
        }
    }
    public class NewsletterPackage
    {
        required public int Year { get; set; }
        required public string Month { get; set; }
    }
}
